rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }

    // Fonction pour vérifier le rôle de l'utilisateur
    function hasRole(role) {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Fonction pour vérifier si l'utilisateur est le propriétaire du document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Fonction pour vérifier si l'utilisateur est admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin";
    }
    
    // Fonction pour vérifier si l'utilisateur est référent
    function isReferent() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return role == "referent" || role == "coreferent";
    }
    
    // Fonction pour vérifier si l'utilisateur est jeune
    function isJeune() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "jeune";
    }
    
    // Fonction pour obtenir les jeunes assignés à un référent
    function getAssignedYouths() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedYouths;
    }
    
    // Fonction pour obtenir les référents assignés à un jeune
    function getAssignedReferents() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedReferents;
    }
    
    // Collection des utilisateurs
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || hasRole('admin');
    }
    
    // Collection des messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.senderId) || 
        isOwner(resource.data.recipientId) ||
        hasRole('admin')
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.senderId) ||
        hasRole('admin')
      );
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.senderId) ||
        hasRole('admin')
      );
    }
    
    // Collection des rendez-vous
    match /appointments/{appointmentId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        hasRole('admin') ||
        hasRole('referent')
      );
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.userId) ||
        hasRole('admin') ||
        hasRole('referent')
      );
      allow update, delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        hasRole('admin') ||
        hasRole('referent')
      );
    }
    
    // Règles pour les notes
    match /notes/{noteId} {
      // Lecture seulement si l'utilisateur est le créateur, admin, référent du jeune concerné
      allow read: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         isAdmin() || 
         (isReferent() && resource.data.youthId != null && 
          getAssignedYouths().hasAny([resource.data.youthId])));
      
      // Création seulement si l'utilisateur est connecté et est le créateur
      allow create: if request.auth != null && 
                   request.resource.data.createdBy == request.auth.uid;
      
      // Mise à jour seulement si l'utilisateur est le créateur ou admin
      allow update: if request.auth != null && 
                   (resource.data.createdBy == request.auth.uid || isAdmin());
      
      // Suppression seulement si l'utilisateur est le créateur ou admin
      allow delete: if request.auth != null && 
                   (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Règles pour les conversations
    match /conversations/{conversationId} {
      // Valider que l'utilisateur est un participant
      allow read: if request.auth != null && 
        (resource.data.participants.hasAny([request.auth.uid]) || isAdmin());
      
      // Règles de création/mise à jour des conversations
      allow create: if request.auth != null && 
        // L'utilisateur doit être dans les participants
        request.resource.data.participants.hasAny([request.auth.uid]) &&
        (
          // Admin peut créer n'importe quelle conversation
          isAdmin() ||
          
          // Un jeune peut créer une conversation uniquement avec ses référents assignés
          (isJeune() && 
           request.resource.data.participants.size() == 2 &&
           request.resource.data.participants.hasAll([request.auth.uid]) &&
           getAssignedReferents().hasAny(request.resource.data.participants)) ||
          
          // Un référent peut créer une conversation uniquement avec ses jeunes assignés
          (isReferent() && 
           request.resource.data.participants.size() == 2 &&
           request.resource.data.participants.hasAll([request.auth.uid]) &&
           getAssignedYouths().hasAny(request.resource.data.participants))
        );
      
      // Mise à jour : il doit être participant
      allow update: if request.auth != null && 
        resource.data.participants.hasAny([request.auth.uid]);
      
      // Suppression : admin ou appartient à la conversation
      allow delete: if request.auth != null && 
        (isAdmin() || resource.data.participants.hasAny([request.auth.uid]));
    }
    
    // Règles pour les notifications
    match /notifications/{notificationId} {
      // Lecture seulement si l'utilisateur est le destinataire ou admin
      allow read: if request.auth != null && 
                 (resource.data.userId == request.auth.uid || isAdmin());
      
      // Création seulement pour les admins ou les utilisateurs autorisés
      allow create: if request.auth != null && 
                    (isAdmin() || request.resource.data.userId == request.auth.uid);
      
      // Mise à jour seulement pour le destinataire (pour marquer comme lu)
      allow update: if request.auth != null && 
                    resource.data.userId == request.auth.uid && 
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read']);
      
      // Suppression seulement pour le destinataire ou admin
      allow delete: if request.auth != null && 
                    (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
} 